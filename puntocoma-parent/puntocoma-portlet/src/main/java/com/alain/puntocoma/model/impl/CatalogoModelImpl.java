package com.alain.puntocoma.model.impl;

import com.alain.puntocoma.model.Catalogo;
import com.alain.puntocoma.model.CatalogoModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Catalogo service. Represents a row in the &quot;PC_Catalogo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.alain.puntocoma.model.CatalogoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CatalogoImpl}.
 * </p>
 *
 * @author Alain
 * @see CatalogoImpl
 * @see com.alain.puntocoma.model.Catalogo
 * @see com.alain.puntocoma.model.CatalogoModel
 * @generated
 */
public class CatalogoModelImpl extends BaseModelImpl<Catalogo>
    implements CatalogoModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a catalogo model instance should use the {@link com.alain.puntocoma.model.Catalogo} interface instead.
     */
    public static final String TABLE_NAME = "PC_Catalogo";
    public static final Object[][] TABLE_COLUMNS = {
            { "catalogoId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "image", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PC_Catalogo (catalogoId LONG not null primary key,title VARCHAR(75) null,image VARCHAR(75) null,description VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table PC_Catalogo";
    public static final String ORDER_BY_JPQL = " ORDER BY catalogo.title ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PC_Catalogo.title ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.alain.puntocoma.model.Catalogo"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.alain.puntocoma.model.Catalogo"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.alain.puntocoma.model.Catalogo"),
            true);
    public static long CATALOGOID_COLUMN_BITMASK = 1L;
    public static long TITLE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.alain.puntocoma.model.Catalogo"));
    private static ClassLoader _classLoader = Catalogo.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Catalogo.class
        };
    private long _catalogoId;
    private long _originalCatalogoId;
    private boolean _setOriginalCatalogoId;
    private String _title;
    private String _image;
    private String _description;
    private long _columnBitmask;
    private Catalogo _escapedModel;

    public CatalogoModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _catalogoId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCatalogoId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _catalogoId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Catalogo.class;
    }

    @Override
    public String getModelClassName() {
        return Catalogo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("catalogoId", getCatalogoId());
        attributes.put("title", getTitle());
        attributes.put("image", getImage());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long catalogoId = (Long) attributes.get("catalogoId");

        if (catalogoId != null) {
            setCatalogoId(catalogoId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String image = (String) attributes.get("image");

        if (image != null) {
            setImage(image);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @Override
    public long getCatalogoId() {
        return _catalogoId;
    }

    @Override
    public void setCatalogoId(long catalogoId) {
        _columnBitmask |= CATALOGOID_COLUMN_BITMASK;

        if (!_setOriginalCatalogoId) {
            _setOriginalCatalogoId = true;

            _originalCatalogoId = _catalogoId;
        }

        _catalogoId = catalogoId;
    }

    public long getOriginalCatalogoId() {
        return _originalCatalogoId;
    }

    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _columnBitmask = -1L;

        _title = title;
    }

    @Override
    public String getImage() {
        if (_image == null) {
            return StringPool.BLANK;
        } else {
            return _image;
        }
    }

    @Override
    public void setImage(String image) {
        _image = image;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Catalogo.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Catalogo toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Catalogo) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CatalogoImpl catalogoImpl = new CatalogoImpl();

        catalogoImpl.setCatalogoId(getCatalogoId());
        catalogoImpl.setTitle(getTitle());
        catalogoImpl.setImage(getImage());
        catalogoImpl.setDescription(getDescription());

        catalogoImpl.resetOriginalValues();

        return catalogoImpl;
    }

    @Override
    public int compareTo(Catalogo catalogo) {
        int value = 0;

        value = getTitle().compareTo(catalogo.getTitle());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Catalogo)) {
            return false;
        }

        Catalogo catalogo = (Catalogo) obj;

        long primaryKey = catalogo.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CatalogoModelImpl catalogoModelImpl = this;

        catalogoModelImpl._originalCatalogoId = catalogoModelImpl._catalogoId;

        catalogoModelImpl._setOriginalCatalogoId = false;

        catalogoModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Catalogo> toCacheModel() {
        CatalogoCacheModel catalogoCacheModel = new CatalogoCacheModel();

        catalogoCacheModel.catalogoId = getCatalogoId();

        catalogoCacheModel.title = getTitle();

        String title = catalogoCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            catalogoCacheModel.title = null;
        }

        catalogoCacheModel.image = getImage();

        String image = catalogoCacheModel.image;

        if ((image != null) && (image.length() == 0)) {
            catalogoCacheModel.image = null;
        }

        catalogoCacheModel.description = getDescription();

        String description = catalogoCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            catalogoCacheModel.description = null;
        }

        return catalogoCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{catalogoId=");
        sb.append(getCatalogoId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", image=");
        sb.append(getImage());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.alain.puntocoma.model.Catalogo");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>catalogoId</column-name><column-value><![CDATA[");
        sb.append(getCatalogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>image</column-name><column-value><![CDATA[");
        sb.append(getImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
