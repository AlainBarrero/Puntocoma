package com.alain.puntocoma.model.impl;

import com.alain.puntocoma.model.Tutorial;
import com.alain.puntocoma.model.TutorialModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Tutorial service. Represents a row in the &quot;PC_Tutorial&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.alain.puntocoma.model.TutorialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TutorialImpl}.
 * </p>
 *
 * @author Alain
 * @see TutorialImpl
 * @see com.alain.puntocoma.model.Tutorial
 * @see com.alain.puntocoma.model.TutorialModel
 * @generated
 */
public class TutorialModelImpl extends BaseModelImpl<Tutorial>
    implements TutorialModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a tutorial model instance should use the {@link com.alain.puntocoma.model.Tutorial} interface instead.
     */
    public static final String TABLE_NAME = "PC_Tutorial";
    public static final Object[][] TABLE_COLUMNS = {
            { "articleId", Types.BIGINT },
            { "catalogoId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "image", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table PC_Tutorial (articleId LONG not null primary key,catalogoId LONG,title VARCHAR(75) null,image VARCHAR(75) null,description VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table PC_Tutorial";
    public static final String ORDER_BY_JPQL = " ORDER BY tutorial.title ASC";
    public static final String ORDER_BY_SQL = " ORDER BY PC_Tutorial.title ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.alain.puntocoma.model.Tutorial"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.alain.puntocoma.model.Tutorial"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.alain.puntocoma.model.Tutorial"),
            true);
    public static long ARTICLEID_COLUMN_BITMASK = 1L;
    public static long TITLE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.alain.puntocoma.model.Tutorial"));
    private static ClassLoader _classLoader = Tutorial.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Tutorial.class
        };
    private long _articleId;
    private long _originalArticleId;
    private boolean _setOriginalArticleId;
    private long _catalogoId;
    private String _title;
    private String _image;
    private String _description;
    private long _columnBitmask;
    private Tutorial _escapedModel;

    public TutorialModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _articleId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setArticleId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _articleId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Tutorial.class;
    }

    @Override
    public String getModelClassName() {
        return Tutorial.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("articleId", getArticleId());
        attributes.put("catalogoId", getCatalogoId());
        attributes.put("title", getTitle());
        attributes.put("image", getImage());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long articleId = (Long) attributes.get("articleId");

        if (articleId != null) {
            setArticleId(articleId);
        }

        Long catalogoId = (Long) attributes.get("catalogoId");

        if (catalogoId != null) {
            setCatalogoId(catalogoId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String image = (String) attributes.get("image");

        if (image != null) {
            setImage(image);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @Override
    public long getArticleId() {
        return _articleId;
    }

    @Override
    public void setArticleId(long articleId) {
        _columnBitmask |= ARTICLEID_COLUMN_BITMASK;

        if (!_setOriginalArticleId) {
            _setOriginalArticleId = true;

            _originalArticleId = _articleId;
        }

        _articleId = articleId;
    }

    public long getOriginalArticleId() {
        return _originalArticleId;
    }

    @Override
    public long getCatalogoId() {
        return _catalogoId;
    }

    @Override
    public void setCatalogoId(long catalogoId) {
        _catalogoId = catalogoId;
    }

    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _columnBitmask = -1L;

        _title = title;
    }

    @Override
    public String getImage() {
        if (_image == null) {
            return StringPool.BLANK;
        } else {
            return _image;
        }
    }

    @Override
    public void setImage(String image) {
        _image = image;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Tutorial.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Tutorial toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Tutorial) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TutorialImpl tutorialImpl = new TutorialImpl();

        tutorialImpl.setArticleId(getArticleId());
        tutorialImpl.setCatalogoId(getCatalogoId());
        tutorialImpl.setTitle(getTitle());
        tutorialImpl.setImage(getImage());
        tutorialImpl.setDescription(getDescription());

        tutorialImpl.resetOriginalValues();

        return tutorialImpl;
    }

    @Override
    public int compareTo(Tutorial tutorial) {
        int value = 0;

        value = getTitle().compareTo(tutorial.getTitle());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Tutorial)) {
            return false;
        }

        Tutorial tutorial = (Tutorial) obj;

        long primaryKey = tutorial.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TutorialModelImpl tutorialModelImpl = this;

        tutorialModelImpl._originalArticleId = tutorialModelImpl._articleId;

        tutorialModelImpl._setOriginalArticleId = false;

        tutorialModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Tutorial> toCacheModel() {
        TutorialCacheModel tutorialCacheModel = new TutorialCacheModel();

        tutorialCacheModel.articleId = getArticleId();

        tutorialCacheModel.catalogoId = getCatalogoId();

        tutorialCacheModel.title = getTitle();

        String title = tutorialCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            tutorialCacheModel.title = null;
        }

        tutorialCacheModel.image = getImage();

        String image = tutorialCacheModel.image;

        if ((image != null) && (image.length() == 0)) {
            tutorialCacheModel.image = null;
        }

        tutorialCacheModel.description = getDescription();

        String description = tutorialCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            tutorialCacheModel.description = null;
        }

        return tutorialCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{articleId=");
        sb.append(getArticleId());
        sb.append(", catalogoId=");
        sb.append(getCatalogoId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", image=");
        sb.append(getImage());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.alain.puntocoma.model.Tutorial");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>articleId</column-name><column-value><![CDATA[");
        sb.append(getArticleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>catalogoId</column-name><column-value><![CDATA[");
        sb.append(getCatalogoId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>image</column-name><column-value><![CDATA[");
        sb.append(getImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
