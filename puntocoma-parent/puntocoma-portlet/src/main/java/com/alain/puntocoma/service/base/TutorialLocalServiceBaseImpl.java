package com.alain.puntocoma.service.base;

import com.alain.puntocoma.model.Tutorial;
import com.alain.puntocoma.service.TutorialLocalService;
import com.alain.puntocoma.service.persistence.CatalogoPersistence;
import com.alain.puntocoma.service.persistence.TutorialPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tutorial local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.alain.puntocoma.service.impl.TutorialLocalServiceImpl}.
 * </p>
 *
 * @author Alain
 * @see com.alain.puntocoma.service.impl.TutorialLocalServiceImpl
 * @see com.alain.puntocoma.service.TutorialLocalServiceUtil
 * @generated
 */
public abstract class TutorialLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements TutorialLocalService, IdentifiableBean {
    @BeanReference(type = com.alain.puntocoma.service.CatalogoLocalService.class)
    protected com.alain.puntocoma.service.CatalogoLocalService catalogoLocalService;
    @BeanReference(type = CatalogoPersistence.class)
    protected CatalogoPersistence catalogoPersistence;
    @BeanReference(type = com.alain.puntocoma.service.TutorialLocalService.class)
    protected com.alain.puntocoma.service.TutorialLocalService tutorialLocalService;
    @BeanReference(type = TutorialPersistence.class)
    protected TutorialPersistence tutorialPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TutorialLocalServiceClpInvoker _clpInvoker = new TutorialLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.alain.puntocoma.service.TutorialLocalServiceUtil} to access the tutorial local service.
     */

    /**
     * Adds the tutorial to the database. Also notifies the appropriate model listeners.
     *
     * @param tutorial the tutorial
     * @return the tutorial that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Tutorial addTutorial(Tutorial tutorial) throws SystemException {
        tutorial.setNew(true);

        return tutorialPersistence.update(tutorial);
    }

    /**
     * Creates a new tutorial with the primary key. Does not add the tutorial to the database.
     *
     * @param articleId the primary key for the new tutorial
     * @return the new tutorial
     */
    @Override
    public Tutorial createTutorial(long articleId) {
        return tutorialPersistence.create(articleId);
    }

    /**
     * Deletes the tutorial with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param articleId the primary key of the tutorial
     * @return the tutorial that was removed
     * @throws PortalException if a tutorial with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Tutorial deleteTutorial(long articleId)
        throws PortalException, SystemException {
        return tutorialPersistence.remove(articleId);
    }

    /**
     * Deletes the tutorial from the database. Also notifies the appropriate model listeners.
     *
     * @param tutorial the tutorial
     * @return the tutorial that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Tutorial deleteTutorial(Tutorial tutorial) throws SystemException {
        return tutorialPersistence.remove(tutorial);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Tutorial.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return tutorialPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alain.puntocoma.model.impl.TutorialModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return tutorialPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alain.puntocoma.model.impl.TutorialModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return tutorialPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return tutorialPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return tutorialPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Tutorial fetchTutorial(long articleId) throws SystemException {
        return tutorialPersistence.fetchByPrimaryKey(articleId);
    }

    /**
     * Returns the tutorial with the primary key.
     *
     * @param articleId the primary key of the tutorial
     * @return the tutorial
     * @throws PortalException if a tutorial with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Tutorial getTutorial(long articleId)
        throws PortalException, SystemException {
        return tutorialPersistence.findByPrimaryKey(articleId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return tutorialPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the tutorials.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alain.puntocoma.model.impl.TutorialModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of tutorials
     * @param end the upper bound of the range of tutorials (not inclusive)
     * @return the range of tutorials
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Tutorial> getTutorials(int start, int end)
        throws SystemException {
        return tutorialPersistence.findAll(start, end);
    }

    /**
     * Returns the number of tutorials.
     *
     * @return the number of tutorials
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getTutorialsCount() throws SystemException {
        return tutorialPersistence.countAll();
    }

    /**
     * Updates the tutorial in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param tutorial the tutorial
     * @return the tutorial that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Tutorial updateTutorial(Tutorial tutorial) throws SystemException {
        return tutorialPersistence.update(tutorial);
    }

    /**
     * Returns the catalogo local service.
     *
     * @return the catalogo local service
     */
    public com.alain.puntocoma.service.CatalogoLocalService getCatalogoLocalService() {
        return catalogoLocalService;
    }

    /**
     * Sets the catalogo local service.
     *
     * @param catalogoLocalService the catalogo local service
     */
    public void setCatalogoLocalService(
        com.alain.puntocoma.service.CatalogoLocalService catalogoLocalService) {
        this.catalogoLocalService = catalogoLocalService;
    }

    /**
     * Returns the catalogo persistence.
     *
     * @return the catalogo persistence
     */
    public CatalogoPersistence getCatalogoPersistence() {
        return catalogoPersistence;
    }

    /**
     * Sets the catalogo persistence.
     *
     * @param catalogoPersistence the catalogo persistence
     */
    public void setCatalogoPersistence(CatalogoPersistence catalogoPersistence) {
        this.catalogoPersistence = catalogoPersistence;
    }

    /**
     * Returns the tutorial local service.
     *
     * @return the tutorial local service
     */
    public com.alain.puntocoma.service.TutorialLocalService getTutorialLocalService() {
        return tutorialLocalService;
    }

    /**
     * Sets the tutorial local service.
     *
     * @param tutorialLocalService the tutorial local service
     */
    public void setTutorialLocalService(
        com.alain.puntocoma.service.TutorialLocalService tutorialLocalService) {
        this.tutorialLocalService = tutorialLocalService;
    }

    /**
     * Returns the tutorial persistence.
     *
     * @return the tutorial persistence
     */
    public TutorialPersistence getTutorialPersistence() {
        return tutorialPersistence;
    }

    /**
     * Sets the tutorial persistence.
     *
     * @param tutorialPersistence the tutorial persistence
     */
    public void setTutorialPersistence(TutorialPersistence tutorialPersistence) {
        this.tutorialPersistence = tutorialPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.alain.puntocoma.model.Tutorial",
            tutorialLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.alain.puntocoma.model.Tutorial");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Tutorial.class;
    }

    protected String getModelClassName() {
        return Tutorial.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = tutorialPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
